<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.springcloud.dao.OrdersMapper">
    <resultMap id="BaseResultMap" type="com.springcloud.entity.Orders">
    <id column="order_id" jdbcType="INTEGER" property="orderId" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="consignee_name" jdbcType="VARCHAR" property="consigneeName" />
    <result column="consignee_phone" jdbcType="CHAR" property="consigneePhone" />
    <result column="consignee_address" jdbcType="VARCHAR" property="consigneeAddress" />
    <result column="order_time" jdbcType="TIMESTAMP" property="orderTime" />
    <result column="order_total" jdbcType="DOUBLE" property="orderTotal" />
    <result column="order_status" jdbcType="INTEGER" property="orderStatus" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from orders
    where order_id = #{orderId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.springcloud.entity.Orders">
    insert into orders (order_id, user_id, consignee_name, 
      consignee_phone, consignee_address, order_time, 
      order_total, order_status)
    values (#{orderId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{consigneeName,jdbcType=VARCHAR}, 
      #{consigneePhone,jdbcType=CHAR}, #{consigneeAddress,jdbcType=VARCHAR}, #{orderTime,jdbcType=TIMESTAMP}, 
      #{orderTotal,jdbcType=DOUBLE}, #{orderStatus,jdbcType=INTEGER})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.springcloud.entity.Orders">
    update orders
    set user_id = #{userId,jdbcType=INTEGER},
      consignee_name = #{consigneeName,jdbcType=VARCHAR},
      consignee_phone = #{consigneePhone,jdbcType=CHAR},
      consignee_address = #{consigneeAddress,jdbcType=VARCHAR},
      order_time = #{orderTime,jdbcType=TIMESTAMP},
      order_total = #{orderTotal,jdbcType=DOUBLE},
      order_status = #{orderStatus,jdbcType=INTEGER}
    where order_id = #{orderId,jdbcType=INTEGER}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select order_id, user_id, consignee_name, consignee_phone, consignee_address, order_time, 
    order_total, order_status
    from orders
    where order_id = #{orderId,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select order_id, user_id, consignee_name, consignee_phone, consignee_address, order_time, 
    order_total, order_status
    from orders
  </select>
  
  <!-- 更新订单的状态 -->
  <update id="updateOrdersStatus" parameterType="com.springcloud.entity.Orders">
   update 
   orders 
   set order_status=#{orderStatus}
   where order_id=#{orderId}
  </update>
  
  <!-- 查询用户表跟订单表中的订单详细 -->
  <select id="selectOrders" parameterType="com.springcloud.entity.Orders" resultMap="orderResultMap">
    select 
    o.order_id, o.user_id, o.consignee_name, o.consignee_phone, o.consignee_address, o.order_time, 
    o.order_total, o.order_status,
    u.user_name, u.user_phone
    from orders o join user u on o.user_id=u.user_id
    <!-- 当第一个条件为and或者or时，使用where来代替and或者 or -->
    <trim prefix="where" prefixOverrides="and|or">
      <if test="users!=null and users.userName!='%%' and users.userName!='%null%'">
        u.user_name like #{user.userName}
      </if>
      <if test="orderTimeMin!=null and orderTimeMax!=null ">
       and o.order_time between #{orderTimeMin} and
       #{orderTimeMax}
      </if>
      <if test="orderStatus!=-1">
       and o.order_status=#{orderStatus}
      </if>
    </trim> 
  </select>
  <!-- 将select语句中的结果列放入到实体类对应的成员变量中（属性） -->
  <resultMap type="com.springcloud.entity.Orders" id="orderResultMap">
  <id column="order_id" jdbcType="INTEGER" property="orderId" />
      <result column="consignee_name" jdbcType="VARCHAR" property="consigneeName" />
    <result column="consignee_phone" jdbcType="CHAR" property="consigneePhone" />
    <result column="consignee_address" jdbcType="VARCHAR" property="consigneeAddress" />
    <result column="order_time" jdbcType="TIMESTAMP" property="orderTime" />
    <result column="order_total" jdbcType="DOUBLE" property="orderTotal" />
    <result column="order_status" jdbcType="INTEGER" property="orderStatus" />
    <!-- 设置在一个实体类中加入另一个实体类 需要在返回的map中加入association-->
    <association property="users" javaType="com.springcloud.entity.Users">
	     <id column="user_id" jdbcType="INTEGER" property="userId" />
	     <result column="user_name" jdbcType="VARCHAR" property="userName" />
	     <result column="user_phone" jdbcType="INTEGER" property="userPhone" />
	</association>
   </resultMap>
</mapper>